name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests found"

  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long,prefix=sha-

      - name: Set image tag output
        id: set_output
        run: echo "image_tag=${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Build and load Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true

      - name: Run Trivy vulnerability scanner
        # uses: aquasecurity/trivy-action@0.28.0
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.meta.outputs.tags }}"
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Cleanup old Docker images (Tagged + Untagged)
        if: always()
        run: |
         # Delete old TAGGED images (keep last 2)
          TAGGED_DIGESTS=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/khannashiv/packages/container/Project-CICD-Github-Actions/versions" \
            | jq -r 'sort_by(.updated_at) | reverse | .[] | select(.metadata.container.tags != []) | .id' | tail -n +3)

          for DIGEST in $TAGGED_DIGESTS; do
            echo "Deleting tagged digest: $DIGEST"
            curl -X DELETE \
              -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
              "https://api.github.com/users/khannashiv/packages/container/Project-CICD-Github-Actions/versions/$DIGEST"
          done

          # Delete ALL UNTAGGED images
          UNTAGGED_DIGESTS=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/khannashiv/packages/container/Project-CICD-Github-Actions/versions" \
            | jq -r '.[] | select(.metadata.container.tags == []) | .id')

          for DIGEST in $UNTAGGED_DIGESTS; do
            echo "Deleting untagged digest: $DIGEST"
            curl -X DELETE \
              -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
              "https://api.github.com/users/khannashiv/packages/container/Project-CICD-Github-Actions/versions/$DIGEST"
          done

  update-k8s:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}

      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update Kubernetes deployment file
        env:
          IMAGE_TAG: ${{ needs.docker.outputs.image_tag }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml

      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update K8s deployment with image: ${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "No changes to commit"
          git push

  cleanup:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    needs: [update-k8s]  # Run after all jobs
    steps:
      - name: Delete old workflow runs (Keep last 2)
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          # Fetch all workflow runs (sorted by newest first)
          RUNS=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=100" \
            | jq -r '.workflow_runs | sort_by(.created_at) | .[] | select(.status == "completed") | .id')

          # Keep last 2 runs, delete the rest
          echo "All runs: $RUNS"
          TO_DELETE=$(echo "$RUNS" | tail -n +3)
          echo "Runs to delete: $TO_DELETE"

          for RUN_ID in $TO_DELETE; do
            echo "Deleting run $RUN_ID"
            curl -X DELETE \
              -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID"
          done